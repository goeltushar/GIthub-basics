link of the video from where I referred - https://youtu.be/BCQHnlnPusY
Git is a version control.
Github is a website where you can do projects that have version control on them.

Repository - A github repository is another word for a project. IT can have multiple files associated with it.
Commit - It is another word for "save".
Commit hash - Unique identifier associated with a commit.


link of the video from where I referred - https://youtu.be/oPpnCh7InLY
Branches
Pull request - Take some changes from a particular branch and bring them into another branch

1.3-3rd video - https://youtu.be/_NrSWLQsDL4
Fork - Takinh entire other instance of repo and just having it under your account
Pull request - sending the code to the original repository

1.5 - 5th video - Linux commands - https://youtu.be/oK8EvVeVltE
cd- change directory
ls- lists the contents of current working directory
pwd- print working directory

1.6 - 6th video - https://youtu.be/yXT1ElMEkW8
Git Commands :
git config --list
git status
git commit
git log
git remote : It lists all the remotes
git remote -v : -v means verbose and it displays the information about the remotes

1.7 - 7th video - https://youtu.be/9p2d-CuVlgc
In this video lecture we will learn about how to turn a project into a git repository and then put the git repository on github.
SO basically we have a project locally in our system. For example in VSCode or any text editor, and now we want to put that project in github, so below are the steps to achieve this -
git init : it will turn a project to a git repository
git add : this is used to stage
git commit -m "Code is ready to push" : it saves the changes locally in your system
git push orgin dev
//This will give an error saying origin doesn't appear in git repository. This is because if my repository started on github and I brought it down to my computer a remote is already been attached to it, but if you are starting your repository on your computer it doesn't have a remote associated with it.
So now go to github and create a new repository. After this come back to terminal and write
git remote add origin <url of your repository>
Now if you will write git remote or git remote -v, you will see a remote with the name origin
So now to push the code
git push origin main

 
1.8 - 8th video - https://youtu.be/bFVtrlyH-kc
GIthub pages- to host a staic website. Hosting is not possible cause github doesn't has a server. Azure or heruko has a server


To create a new branch 
 Two ways :
    1st way:
            git branch branchName
            git checkout new-feature
    2nd way:
            git checkout -b new-feature
And that's it! You have now created a new branch in Git. You can make changes to this branch and commit them just like you would on the master branch. When you're ready to merge the changes from this branch back into the master branch, you can use the git merge command.


What are remotes :
In Git, a remote is a repository that is hosted on a different server than your local repository. You can use remotes to collaborate with others on the same codebase, or to keep a backup copy of your repository on a remote server.

When you clone a repository, Git automatically creates a remote named "origin" that points to the original repository you cloned from. You can use the git remote command to see a list of all the remotes associated with your repository:
git remote -v
This will show you the names and URLs of all the remotes associated with your repository. By default, the origin remote is the one that you will be pushing and pulling changes to and from.

You can also add new remotes to your repository using the git remote add command. For example, to add a new remote named "my-remote" with the URL "https://github.com/my-username/my-repo.git", you would use the following command:
git remote add my-remote https://github.com/my-username/my-repo.git

Once you have added a remote, you can push your changes to that remote using the git push command. For example, to push your changes to the origin remote, you would use the following command:
git push origin <branch-name>

And to push your changes to a different remote, you would use the following command:
git push my-remote <branch-name>

Similarly, you can pull changes from a remote using the git pull command. For example, to pull changes from the origin remote, you would use the following command:
git pull origin <branch-name>

And to pull changes from a different remote, you would use the following command:
git pull my-remote <branch-name>


Pull changes from upstream
 Two ways:
   1st way:
          git checkout feature/gitTest // THis command is used to move to a particular branch
          git fetch upstream gitTest1
          git merge upstream/gitTest1
          git push origin feature/gitTest
      //This method is not recommended because it might give us merge conflicts
      
   2nd way:
         git checkout -b feature/feature-name upstream/feature/feature-name
        git push origin feature/feature-name
      //THis will not give merge conflicts. So we should use this method
     why this will not give merge conflicts?
